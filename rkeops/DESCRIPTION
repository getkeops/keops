Package: rkeops
Title: Kernel Operations on GPU or CPU, with Autodiff, without Memory
    Overflows
Version: 2.2.2
Authors@R: c(
    person("Ghislain", "Durif", , "gd.dev@libertymail.net", role = c("aut", "cre"),
           comment = c(ORCID = "0000-0003-2567-1401", website = "<https://gdurif.perso.math.cnrs.fr/>")),
    person("Amelie", "Vernay", role = "aut",
           comment = "amelie.vernay@umontpellier.fr"),
    person("Chloe", "Serre-Combe", role = "aut",
           comment = "chloe.serre-combe@umontpellier.fr"),
    person("Benjamin", "Charlier", role = "aut",
           comment = "<http://imag.umontpellier.fr/~charlier/>"),
    person("Jean", "Feydy", role = "aut",
           comment = "<https://www.jeanfeydy.com>"),
    person("Joan A.", "Glaunès", role = "aut",
           comment = "<https://www.mi.parisdescartes.fr/~glaunes/>"),
    person("François-David", "Collin", role = "ctb")
  )
Description: The 'KeOps' library lets you compute generic reductions of
    very large arrays whose entries are given by a mathematical formula
    with CPU and GPU computing support. It combines a tiled reduction
    scheme with an automatic differentiation engine. It is perfectly
    suited to the efficient computation of Kernel dot products and the
    associated gradients, even when the full kernel matrix does not fit
    into the GPU memory.
License: MIT + file LICENSE
URL: https://www.kernel-operations.io/rkeops/, https://github.com/getkeops/keops/
BugReports: https://github.com/getkeops/keops/issues
Imports: 
    checkmate,
    data.table,
    future,
    lifecycle,
    Rdpack,
    reticulate,
    RhpcBLASctl,
    stats,
    stringi,
    stringr,
    tibble,
    utils
Suggests: 
    dplyr,
    ggplot2,
    knitr,
    plotly,
    pracma,
    remotes,
    reshape,
    rmarkdown,
    testthat (>= 3.0.0),
    withr
VignetteBuilder: 
    knitr
RdMacros: 
    Rdpack
Config/testthat/edition: 3
Date/Publication: 2024/02/12
Encoding: UTF-8
OS_type: unix
Roxygen: list(markdown = TRUE)
RoxygenNote: 7.3.1
SystemRequirements: Python (>= 3.5.0), C++ compiler (gcc/clang), CUDA
    (optional but recommended)
